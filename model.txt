    npx tailwindcss -i ./static/src/input.css -o ./static/dist/css/output.css --watch
    
    import numpy as np
    import pandas as pd
    from pathlib import Path
    import os.path
    import matplotlib.pyplot as plt
    import tensorflow as tf
    from tensorflow.keras.preprocessing.image import load_img,img_to_array
    print(tf.__version__)

    2.16.1

    from pathlib import Path

    # Create a list with the filepaths for training and testing
    train_dir = Path('C:/Users/abdul/OneDrive/Desktop/Image-recognition/train')
    train_filepaths = list(train_dir.glob('**/*.jpg'))

    test_dir = Path('C:/Users/abdul/OneDrive/Desktop/Image-recognition/test')
    test_filepaths = list(test_dir.glob(r'**/*.jpg'))

    val_dir = Path('C:/Users/abdul/OneDrive/Desktop/Image-recognition/validation')
    val_filepaths = list(val_dir.glob(r'**/*.jpg'))

    def image_processing(filepath):
        """ Create a DataFrame with the filepath and the labels of the pictures
        """
        labels = [str(filepath[i]).split("\\")[-2] for i in range(len(filepath))]  # Use backslashes for Windows paths
        filepath = pd.Series(filepath, name='Filepath').astype(str)
        labels = pd.Series(labels, name='Label')

        # Concatenate filepaths and labels
        df = pd.concat([filepath, labels], axis=1)

        # Shuffle the DataFrame and reset index
        df = df.sample(frac=1).reset_index(drop=True)
        
        return df

    train_df = image_processing(train_filepaths)
    test_df = image_processing(test_filepaths)
    val_df = image_processing(val_filepaths)

    print('-- Training set --\n')
    print(f'Number of pictures: {train_df.shape[0]}\n')
    print(f'Number of different labels: {len(train_df.Label.unique())}\n')
    print(f'Labels: {train_df.Label.unique()}')

    -- Training set --

    Number of pictures: 2855

    Number of different labels: 36

    Labels: ['cabbage' 'kiwi' 'pomegranate' 'pear' 'orange' 'onion' 'sweetpotato'
     'grapes' 'lemon' 'chilli pepper' 'turnip' 'soy beans' 'peas' 'beetroot'
     'tomato' 'bell pepper' 'cucumber' 'pineapple' 'eggplant' 'apple' 'mango'
     'capsicum' 'cauliflower' 'garlic' 'raddish' 'paprika' 'sweetcorn' 'corn'
     'carrot' 'spinach' 'watermelon' 'lettuce' 'jalepeno' 'potato' 'banana'
     'ginger']

    train_df.head(5)

                                                Filepath        Label
    0  C:\Users\abdul\OneDrive\Desktop\Image-recognit...      cabbage
    1  C:\Users\abdul\OneDrive\Desktop\Image-recognit...         kiwi
    2  C:\Users\abdul\OneDrive\Desktop\Image-recognit...  pomegranate
    3  C:\Users\abdul\OneDrive\Desktop\Image-recognit...         pear
    4  C:\Users\abdul\OneDrive\Desktop\Image-recognit...         kiwi

    df_unique = train_df.copy().drop_duplicates(subset=["Label"]).reset_index()

    # Display some pictures of the dataset
    fig, axes = plt.subplots(nrows=6, ncols=6, figsize=(8, 7),
                            subplot_kw={'xticks': [], 'yticks': []})

    for i, ax in enumerate(axes.flat):
        ax.imshow(plt.imread(df_unique.Filepath[i]))
        ax.set_title(df_unique.Label[i], fontsize = 12)
    plt.tight_layout(pad=0.5)
    plt.show()

[]

    train_generator = tf.keras.preprocessing.image.ImageDataGenerator(
        preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
    )

    test_generator = tf.keras.preprocessing.image.ImageDataGenerator(
        preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
    )

    train_images = train_generator.flow_from_dataframe(
        dataframe=train_df,
        x_col='Filepath',
        y_col='Label',
        target_size=(224, 224),
        color_mode='rgb',
        class_mode='categorical',
        batch_size=32,
        shuffle=True,
        seed=0,
        rotation_range=30,
        zoom_range=0.15,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.15,
        horizontal_flip=True,
        fill_mode="nearest"
    )

    Found 2855 validated image filenames belonging to 36 classes.

    val_images = train_generator.flow_from_dataframe(
        dataframe=val_df,
        x_col='Filepath',
        y_col='Label',
        target_size=(224, 224),
        color_mode='rgb',
        class_mode='categorical',
        batch_size=32,
        shuffle=True,
        seed=0,
        rotation_range=30,
        zoom_range=0.15,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.15,
        horizontal_flip=True,
        fill_mode="nearest"
    )

    Found 340 validated image filenames belonging to 36 classes.

    test_images = test_generator.flow_from_dataframe(
        dataframe=test_df,
        x_col='Filepath',
        y_col='Label',
        target_size=(224, 224),
        color_mode='rgb',
        class_mode='categorical',
        batch_size=32,
        shuffle=False
    )

    Found 340 validated image filenames belonging to 36 classes.

    pretrained_model = tf.keras.applications.MobileNetV2(
        input_shape=(224, 224, 3),
        include_top=False,
        weights='imagenet',
        pooling='avg'
    )
    pretrained_model.trainable = False

    Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5
    9406464/9406464 ━━━━━━━━━━━━━━━━━━━━ 4s 0us/step

    inputs = pretrained_model.input

    x = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)
    x = tf.keras.layers.Dense(128, activation='relu')(x)

    outputs = tf.keras.layers.Dense(36, activation='softmax')(x)

    model = tf.keras.Model(inputs=inputs, outputs=outputs)

    model.compile(
        optimizer='adam',
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )

    history = model.fit(
        train_images,
        validation_data=val_images,
        batch_size = 32,
        epochs=10,
        callbacks=[
            tf.keras.callbacks.EarlyStopping(
                monitor='val_loss',
                patience=2,
                restore_best_weights=True
            )
        ]
    )

    Epoch 1/10

    c:\Users\abdul\AppData\Local\Programs\Python\Python312\Lib\site-packages\keras\src\trainers\data_adapters\py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
      self._warn_if_super_not_called()

    90/90 ━━━━━━━━━━━━━━━━━━━━ 157s 2s/step - accuracy: 0.3141 - loss: 2.6702 - val_accuracy: 0.8118 - val_loss: 0.5603
    Epoch 2/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 94s 1s/step - accuracy: 0.8099 - loss: 0.6077 - val_accuracy: 0.9059 - val_loss: 0.3143
    Epoch 3/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 88s 930ms/step - accuracy: 0.8861 - loss: 0.3771 - val_accuracy: 0.9176 - val_loss: 0.2435
    Epoch 4/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 92s 995ms/step - accuracy: 0.9348 - loss: 0.2191 - val_accuracy: 0.9382 - val_loss: 0.2162
    Epoch 5/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 87s 920ms/step - accuracy: 0.9551 - loss: 0.1487 - val_accuracy: 0.9441 - val_loss: 0.1863
    Epoch 6/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 87s 933ms/step - accuracy: 0.9650 - loss: 0.1241 - val_accuracy: 0.9588 - val_loss: 0.1849
    Epoch 7/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 98s 1s/step - accuracy: 0.9715 - loss: 0.1063 - val_accuracy: 0.9647 - val_loss: 0.1670
    Epoch 8/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 93s 990ms/step - accuracy: 0.9873 - loss: 0.0598 - val_accuracy: 0.9676 - val_loss: 0.1504
    Epoch 9/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 121s 1s/step - accuracy: 0.9905 - loss: 0.0429 - val_accuracy: 0.9676 - val_loss: 0.1616
    Epoch 10/10
    90/90 ━━━━━━━━━━━━━━━━━━━━ 87s 924ms/step - accuracy: 0.9879 - loss: 0.0454 - val_accuracy: 0.9559 - val_loss: 0.1928

    pred = model.predict(test_images)
    pred = np.argmax(pred,axis=1)
    # Map the label
    labels = (train_images.class_indices)
    labels = dict((v,k) for k,v in labels.items())
    pred1 = [labels[k] for k in pred]
    pred1

    11/11 ━━━━━━━━━━━━━━━━━━━━ 18s 2s/step

    ['spinach',
     'soy beans',
     'potato',
     'raddish',
     'apple',
     'watermelon',
     'jalepeno',
     'raddish',
     'lemon',
     'capsicum',
     'chilli pepper',
     'tomato',
     'ginger',
     'soy beans',
     'jalepeno',
     'potato',
     'watermelon',
     'capsicum',
     'pear',
     'onion',
     'orange',
     'sweetcorn',
     'paprika',
     'cauliflower',
     'lettuce',
     'jalepeno',
     'lettuce',
     'grapes',
     'cauliflower',
     'pear',
     'garlic',
     'pineapple',
     'carrot',
     'grapes',
     'spinach',
     'mango',
     'kiwi',
     'garlic',
     'pomegranate',
     'mango',
     'chilli pepper',
     'ginger',
     'grapes',
     'chilli pepper',
     'cucumber',
     'kiwi',
     'tomato',
     'turnip',
     'sweetpotato',
     'kiwi',
     'turnip',
     'sweetcorn',
     'onion',
     'corn',
     'spinach',
     'lemon',
     'pomegranate',
     'peas',
     'eggplant',
     'lettuce',
     'banana',
     'mango',
     'sweetcorn',
     'bell pepper',
     'turnip',
     'banana',
     'grapes',
     'eggplant',
     'eggplant',
     'potato',
     'watermelon',
     'pomegranate',
     'beetroot',
     'banana',
     'watermelon',
     'eggplant',
     'capsicum',
     'mango',
     'mango',
     'onion',
     'mango',
     'potato',
     'grapes',
     'soy beans',
     'chilli pepper',
     'soy beans',
     'tomato',
     'grapes',
     'onion',
     'lemon',
     'beetroot',
     'grapes',
     'ginger',
     'sweetpotato',
     'eggplant',
     'watermelon',
     'capsicum',
     'garlic',
     'kiwi',
     'peas',
     'spinach',
     'carrot',
     'cauliflower',
     'raddish',
     'pineapple',
     'onion',
     'bell pepper',
     'tomato',
     'pineapple',
     'orange',
     'sweetcorn',
     'pineapple',
     'cabbage',
     'cabbage',
     'sweetpotato',
     'turnip',
     'cauliflower',
     'tomato',
     'paprika',
     'sweetcorn',
     'raddish',
     'tomato',
     'peas',
     'watermelon',
     'beetroot',
     'lettuce',
     'pineapple',
     'capsicum',
     'capsicum',
     'peas',
     'garlic',
     'ginger',
     'ginger',
     'sweetpotato',
     'pomegranate',
     'ginger',
     'spinach',
     'pear',
     'sweetpotato',
     'cabbage',
     'watermelon',
     'chilli pepper',
     'lemon',
     'apple',
     'pear',
     'carrot',
     'beetroot',
     'orange',
     'corn',
     'potato',
     'tomato',
     'potato',
     'jalepeno',
     'raddish',
     'potato',
     'ginger',
     'banana',
     'paprika',
     'pear',
     'raddish',
     'watermelon',
     'banana',
     'spinach',
     'cucumber',
     'paprika',
     'carrot',
     'apple',
     'bell pepper',
     'pomegranate',
     'chilli pepper',
     'kiwi',
     'cauliflower',
     'sweetpotato',
     'turnip',
     'orange',
     'cauliflower',
     'orange',
     'turnip',
     'jalepeno',
     'ginger',
     'cabbage',
     'cucumber',
     'capsicum',
     'pear',
     'kiwi',
     'cabbage',
     'eggplant',
     'lemon',
     'paprika',
     'beetroot',
     'lettuce',
     'peas',
     'pomegranate',
     'eggplant',
     'cauliflower',
     'jalepeno',
     'beetroot',
     'pear',
     'grapes',
     'apple',
     'paprika',
     'peas',
     'onion',
     'corn',
     'cauliflower',
     'pear',
     'onion',
     'apple',
     'cabbage',
     'turnip',
     'sweetcorn',
     'mango',
     'mango',
     'sweetcorn',
     'soy beans',
     'cabbage',
     'corn',
     'garlic',
     'corn',
     'pear',
     'paprika',
     'cucumber',
     'lemon',
     'sweetpotato',
     'corn',
     'soy beans',
     'pear',
     'jalepeno',
     'banana',
     'lettuce',
     'ginger',
     'corn',
     'eggplant',
     'carrot',
     'bell pepper',
     'corn',
     'garlic',
     'tomato',
     'raddish',
     'pear',
     'capsicum',
     'capsicum',
     'cauliflower',
     'sweetpotato',
     'ginger',
     'orange',
     'garlic',
     'pineapple',
     'apple',
     'beetroot',
     'bell pepper',
     'cabbage',
     'spinach',
     'corn',
     'sweetcorn',
     'carrot',
     'onion',
     'cucumber',
     'jalepeno',
     'cauliflower',
     'sweetpotato',
     'turnip',
     'pomegranate',
     'pear',
     'eggplant',
     'onion',
     'cucumber',
     'beetroot',
     'bell pepper',
     'kiwi',
     'lettuce',
     'cucumber',
     'garlic',
     'chilli pepper',
     'beetroot',
     'pomegranate',
     'apple',
     'apple',
     'garlic',
     'sweetcorn',
     'soy beans',
     'watermelon',
     'paprika',
     'paprika',
     'chilli pepper',
     'corn',
     'lettuce',
     'pomegranate',
     'banana',
     'pineapple',
     'cabbage',
     'pomegranate',
     'beetroot',
     'peas',
     'eggplant',
     'lettuce',
     'bell pepper',
     'mango',
     'carrot',
     'pineapple',
     'cabbage',
     'pineapple',
     'bell pepper',
     'kiwi',
     'carrot',
     'kiwi',
     'grapes',
     'pineapple',
     'peas',
     'watermelon',
     'potato',
     'peas',
     'garlic',
     'mango',
     'cucumber',
     'soy beans',
     'eggplant',
     'sweetpotato',
     'eggplant',
     'capsicum',
     'lemon',
     'paprika',
     'jalepeno',
     'tomato',
     'spinach',
     'soy beans',
     'spinach',
     'orange',
     'tomato',
     'corn',
     'soy beans',
     'kiwi',
     'cucumber',
     'corn',
     'spinach',
     'turnip',
     'turnip',
     'cucumber',
     'raddish',
     'bell pepper']

    from sklearn.metrics import accuracy_score
    y_test = [labels[k] for k in test_images.classes]
    acc = accuracy_score(y_test, pred1)
    print(f'Accuracy on the test set: {100*acc:.2f}%')

    Accuracy on the test set: 96.76%

    from sklearn.metrics import confusion_matrix
    import seaborn as sns

    cf_matrix = confusion_matrix(y_test, pred1, normalize='true')
    plt.figure(figsize = (15,10))
    sns.heatmap(cf_matrix, 
                annot=True, 
                xticklabels = sorted(set(y_test)), 
                yticklabels = sorted(set(y_test)),
                )
    plt.title('Normalized Confusion Matrix')
    plt.show()

[]

    fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(15, 15),
                            subplot_kw={'xticks': [], 'yticks': []})

    for i, ax in enumerate(axes.flat):
        ax.imshow(plt.imread(test_df.Filepath.iloc[i]))
        ax.set_title(f"True: {test_df.Label.iloc[i]}\nPredicted: {pred1[i]}")
    plt.tight_layout()
    plt.show()

[]

    def output(location):
        img=load_img(location,target_size=(224,224,3))
        img=img_to_array(img)
        img=img/255
        img=np.expand_dims(img,[0])
        answer=model.predict(img)
        y_class = answer.argmax(axis=-1)
        y = " ".join(str(x) for x in y_class)
        y = int(y)
        res = labels[y]
        return res

    img = output('C:/Users/abdul/OneDrive/Desktop/Image-recognition/apple-fir.png')
    img

    1/1 ━━━━━━━━━━━━━━━━━━━━ 2s 2s/step

    'apple'

    img = output('C:/Users/abdul/OneDrive/Desktop/Image-recognition/spinach-fir.jpeg')
    img

    1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 134ms/step

    'spinach'


    img = output("C:/Users/abdul/OneDrive/Pictures/Screenshots/Screenshot 2024-05-09 134533.png")
    img

    1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 99ms/step

    'pear'
